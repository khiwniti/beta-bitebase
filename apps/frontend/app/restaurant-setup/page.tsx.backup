"use client"

import React, { useState, useRef, useEffect } from "react"
import { useRouter } from "next/navigation"
import dynamic from "next/dynamic"
import { useAuth } from "../../contexts/AuthContext"
import BiteBaseLogo from "../../components/BiteBaseLogo"
import {
  MapPin,
  Search,
  Heart,
  BarChart3,
  Settings,
  Send,
  Bot,
  User,
  Layers,
  Navigation,
  Filter,
  Clock,
  Star,
  Utensils,
  ChevronDown,
  ChevronUp,
  ChevronRight,
  Loader2,
  CheckCircle,
  Building2,
  ArrowRight,
  Sparkles,
  TrendingUp,
  Eye,
  EyeOff,
  Ruler,
  Home,
  Coffee,
  Activity,
  PieChart,
  Map as MapIcon,
  Target,
  Users,
  Building,
  ShoppingCart,
  DollarSign,
  Zap,
  Bell
} from "lucide-react"

// Mapbox Market Intelligence Map Component
const MapboxMap = ({ center, zoom, className, onClick, children }: any) => {
  return (
    <div className={`relative ${className}`} onClick={onClick}>
      <div className="absolute inset-0 bg-gradient-to-br from-slate-100 via-gray-100 to-slate-200">
        {/* Professional Mapbox-style interface */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin mb-6 mx-auto"></div>
            <h3 className="text-xl font-bold text-gray-800 mb-2">Mapbox Market Intelligence</h3>
            <p className="text-gray-600 font-medium mb-1">Loading interactive geospatial analysis</p>
            <p className="text-gray-500 text-sm">Click anywhere to analyze location potential</p>
            <div className="mt-4 flex justify-center space-x-4 text-xs text-gray-500">
              <span>• Demographics</span>
              <span>• Competition</span>
              <span>• Foot Traffic</span>
              <span>• Real Estate</span>
            </div>
          </div>
        </div>

        {/* Mock map grid pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="grid grid-cols-20 grid-rows-20 h-full w-full">
            {Array.from({ length: 400 }).map((_, i) => (
              <div key={i} className="border border-gray-300"></div>
            ))}
          </div>
        </div>

        {/* Mock location markers */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <div className="w-4 h-4 bg-emerald-500 rounded-full border-2 border-white shadow-lg animate-pulse"></div>
        </div>
        <div className="absolute top-1/3 left-1/3 transform -translate-x-1/2 -translate-y-1/2">
          <div className="w-3 h-3 bg-blue-500 rounded-full border-2 border-white shadow-md"></div>
        </div>
        <div className="absolute top-2/3 left-2/3 transform -translate-x-1/2 -translate-y-1/2">
          <div className="w-3 h-3 bg-red-500 rounded-full border-2 border-white shadow-md"></div>
        </div>
      </div>
      {children}
    </div>
  )
}

// Create a client-only wrapper to prevent SSR issues
const ClientOnlyRestaurantSetup = dynamic(() => Promise.resolve(() => <RestaurantSetupContent />), {
  ssr: false,
  loading: () => (
    <div className="flex h-screen bg-gray-50 items-center justify-center">
      <div className="text-center">
        <div className="w-10 h-10 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin mb-4 mx-auto"></div>
        <p className="text-gray-600">Loading restaurant setup...</p>
      </div>
    </div>
  )
})

interface Message {
  id: string
  content: string
  sender: 'user' | 'bot'
  timestamp: Date
}

interface Restaurant {
  id: string
  name: string
  cuisine: string
  rating: number
  distance: string
  hours: string
  priceRange: string
  tags: string[]
  image: string
}

interface LocationData {
  lat: number
  lng: number
  address: string
  score?: number
  insights?: string[]
}

interface RestaurantProfile {
  name: string
  concept: string
  cuisine: string
  budget: string
  targetAudience: string
  goals: string[]
  location?: LocationData
}

function RestaurantSetupContent() {
  const { user, logout } = useAuth()
  const router = useRouter()
  const [mounted, setMounted] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: "Welcome to BiteBase Intelligence! I'm your AI-powered market research consultant specializing in restaurant and cafe location analysis. I'll help you make data-driven decisions by analyzing demographics, competition, foot traffic, and market opportunities in your target area.\n\nTo provide you with a comprehensive market analysis report, I need to understand your business concept first. Let's start with: What type of restaurant or cafe are you planning to open?",
      sender: 'bot',
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [activeFilters, setActiveFilters] = useState(['All'])
  const [panelExpanded, setPanelExpanded] = useState(true)
  const [heatmapToggles, setHeatmapToggles] = useState({
    demographics: false,
    population: false,
    realEstate: false,
    footTraffic: false
  })
  const [mapFilters, setMapFilters] = useState({
    groceryStores: false,
    strategicPoints: false,
    competitors: true,
    publicTransport: false
  })
  const [competitorFilters, setCompetitorFilters] = useState({
    sameCuisine: true,
    priceRange: 'all', // 'budget', 'mid', 'premium', 'all'
    rating: 'all', // '4+', '3+', 'all'
    distance: 1 // in kilometers
  })
  const [mapCenter, setMapCenter] = useState<[number, number]>([13.7563, 100.5018]) // Bangkok
  const [mapZoom, setMapZoom] = useState(14)
  const [measurementMode, setMeasurementMode] = useState(false)
  const [bufferRadius, setBufferRadius] = useState(500) // in meters
  const [selectedLocation, setSelectedLocation] = useState<LocationData | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [restaurantProfile, setRestaurantProfile] = useState<RestaurantProfile>({
    name: "",
    concept: "",
    cuisine: "",
    budget: "",
    targetAudience: "",
    goals: []
  })
  const [extractedData, setExtractedData] = useState<any>({})

  const messagesEndRef = useRef<HTMLDivElement>(null)
  const chatContainerRef = useRef<HTMLDivElement>(null)

  const restaurants: Restaurant[] = [
    {
      id: '1',
      name: 'Bella Napoli',
      cuisine: 'Italian',
      rating: 4.8,
      distance: '0.3 mi',
      hours: 'Open until 10:30 PM',
      priceRange: '$$',
      tags: ['Outdoor Seating', 'Romantic'],
      image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
    },
    {
      id: '2',
      name: 'Sushi Palace',
      cuisine: 'Japanese',
      rating: 4.6,
      distance: '0.5 mi',
      hours: 'Open until 11:00 PM',
      priceRange: '$$$',
      tags: ['Happy Hour', 'Sushi Bar'],
      image: 'https://images.unsplash.com/photo-1555396273-367ea4eb4db5?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
    },
    {
      id: '3',
      name: 'Burger Haven',
      cuisine: 'American',
      rating: 4.3,
      distance: '0.7 mi',
      hours: 'Open until 12:00 AM',
      priceRange: '$',
      tags: ['Takeout', 'Late Night'],
      image: 'https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
    },
    {
      id: '4',
      name: 'Green Leaf Cafe',
      cuisine: 'Vegetarian',
      rating: 4.5,
      distance: '0.4 mi',
      hours: 'Open until 9:00 PM',
      priceRange: '$$',
      tags: ['Organic', 'Vegan Options'],
      image: 'https://images.unsplash.com/photo-1546069901-ba9599a8eaf6?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60'
    }
  ]

  const quickSuggestions = [
    'Coffee shop analysis',
    'Fine dining restaurant',
    'Fast casual concept',
    'Analyze demographics',
    'Competition analysis',
    'Foot traffic data'
  ]

  const filterOptions = ['All', 'Italian', 'Asian', 'Mexican', 'Vegetarian', 'Fast Food']

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    // For demo purposes, allow access without authentication
    // In production, uncomment the lines below to require authentication

    // if (mounted && user === null) {
    //   // Only redirect if we're sure there's no user (not just loading)
    //   const timer = setTimeout(() => {
    //     router.push('/auth')
    //   }, 100)
    //   return () => clearTimeout(timer)
    // }
  }, [mounted, user, router])

  useEffect(() => {
    if (mounted) {
      scrollToBottom()
    }
  }, [mounted, messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  const handleSendMessage = async (content: string) => {
    if (!content.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsLoading(true)

    // Extract data from user message
    const extractedInfo = extractRestaurantData(content)
    if (Object.keys(extractedInfo).length > 0) {
      setExtractedData(prev => ({ ...prev, ...extractedInfo }))
      setRestaurantProfile(prev => ({ ...prev, ...extractedInfo }))
    }

    // Simulate AI response
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        content: generateBotResponse(content),
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botResponse])
      setIsLoading(false)
    }, 1500)
  }

  const extractRestaurantData = (input: string): any => {
    const data: any = {}
    const lowerInput = input.toLowerCase()

    // Extract cuisine type
    if (lowerInput.includes('italian') || lowerInput.includes('pizza') || lowerInput.includes('pasta')) {
      data.cuisineType = 'Italian'
    } else if (lowerInput.includes('asian') || lowerInput.includes('chinese') || lowerInput.includes('thai') || lowerInput.includes('japanese') || lowerInput.includes('sushi')) {
      data.cuisineType = 'Asian'
    } else if (lowerInput.includes('mexican') || lowerInput.includes('taco') || lowerInput.includes('burrito')) {
      data.cuisineType = 'Mexican'
    } else if (lowerInput.includes('american') || lowerInput.includes('burger') || lowerInput.includes('bbq')) {
      data.cuisineType = 'American'
    } else if (lowerInput.includes('vegetarian') || lowerInput.includes('vegan') || lowerInput.includes('plant-based')) {
      data.cuisineType = 'Vegetarian'
    }

    // Extract budget
    if (lowerInput.includes('$200k') || lowerInput.includes('200,000') || lowerInput.includes('200000')) {
      data.budget = '$200K'
    } else if (lowerInput.includes('$100k') || lowerInput.includes('100,000') || lowerInput.includes('100000')) {
      data.budget = '$100K'
    } else if (lowerInput.includes('$500k') || lowerInput.includes('500,000') || lowerInput.includes('500000')) {
      data.budget = '$500K'
    } else if (lowerInput.includes('budget') && lowerInput.includes('low')) {
      data.budget = 'Under $100K'
    } else if (lowerInput.includes('budget') && lowerInput.includes('high')) {
      data.budget = 'Over $500K'
    }

    // Extract target audience
    if (lowerInput.includes('family') || lowerInput.includes('families')) {
      data.targetAudience = 'Families'
    } else if (lowerInput.includes('young') || lowerInput.includes('millennial') || lowerInput.includes('student')) {
      data.targetAudience = 'Young Adults'
    } else if (lowerInput.includes('business') || lowerInput.includes('professional') || lowerInput.includes('office')) {
      data.targetAudience = 'Business Professionals'
    } else if (lowerInput.includes('tourist') || lowerInput.includes('visitor')) {
      data.targetAudience = 'Tourists'
    }

    return data
  }

  const generateBotResponse = (userInput: string): string => {
    const input = userInput.toLowerCase()

    // Coffee shop analysis
    if (input.includes('coffee') || input.includes('cafe') || input.includes('espresso')) {
      return "Coffee shops have excellent market potential! Based on current demographic data, I'm seeing strong indicators for coffee culture in this area:\n\n📊 Market Analysis:\n• High concentration of young professionals (25-40 age group)\n• Morning foot traffic peaks at 7-9 AM\n• Average spending: $4-8 per visit\n• Competition: 3 coffee shops within 1km radius\n\nKey success factors for coffee shops:\n1. Location near office buildings or transit hubs\n2. Strong morning rush positioning\n3. WiFi and workspace amenities\n\nWhat's your target concept? Specialty coffee, grab-and-go, or workspace-focused?"
    }

    // Fine dining analysis
    if (input.includes('fine dining') || input.includes('upscale') || input.includes('premium')) {
      return "Fine dining presents unique opportunities in this market! Let me analyze the premium dining landscape:\n\n📈 Market Insights:\n• Household income analysis shows 35% of residents in premium spending bracket\n• Limited fine dining options (market gap identified)\n• Evening foot traffic concentrated around entertainment districts\n• Average fine dining spend: $80-120 per person\n\nCritical factors for fine dining success:\n1. Location prestige and accessibility\n2. Parking availability\n3. Proximity to hotels/business centers\n4. Evening entertainment synergy\n\nWhat cuisine type and price point are you targeting? I can analyze specific location opportunities."
    }

    // Demographics analysis
    if (input.includes('demographic') || input.includes('population') || input.includes('customer')) {
      return "Excellent! Demographic analysis is crucial for restaurant success. Here's what the data reveals about this area:\n\n👥 Population Demographics:\n• Total population: 45,000 within 2km radius\n• Age distribution: 28% (25-35), 24% (35-45), 18% (45-55)\n• Household income: Median $65,000, 35% above $80,000\n• Lifestyle: 42% professionals, 28% families, 30% students/young adults\n\n🏠 Residential Patterns:\n• High-density apartments: 60%\n• Single-family homes: 40%\n• New developments increasing population by 8% annually\n\nThis data suggests strong potential for both quick-service and family dining concepts. What type of customer experience are you planning to create?"
    }

    // Competition analysis
    if (input.includes('competition') || input.includes('competitor') || input.includes('market gap')) {
      return "Competition analysis is essential! I've identified key market dynamics in this area:\n\n🏪 Competitive Landscape:\n• Total restaurants: 47 within 1km radius\n• Market saturation: Moderate (healthy competition)\n• Top performers: Italian (4.8★), Japanese (4.6★), American (4.3★)\n• Underserved segments: Korean, Mediterranean, Healthy fast-casual\n\n📊 Performance Metrics:\n• Average rating: 4.2/5 stars\n• Price distribution: 35% budget ($), 45% mid-range ($$), 20% premium ($$$)\n• Peak hours: 12-2 PM, 6-8 PM\n\n🎯 Market Opportunities:\n1. Korean cuisine (no direct competitors)\n2. Healthy fast-casual (growing demand)\n3. Late-night dining (limited options after 10 PM)\n\nWhich market segment interests you most?"
    }

    // Foot traffic analysis
    if (input.includes('foot traffic') || input.includes('traffic') || input.includes('pedestrian')) {
      return "Foot traffic analysis reveals valuable insights for location selection:\n\n🚶 Traffic Patterns:\n• Peak pedestrian hours: 7-9 AM (2,400/hr), 12-2 PM (1,800/hr), 5-7 PM (2,100/hr)\n• Weekend traffic: 40% higher on Saturdays\n• Seasonal variation: +25% during summer months\n• Transit impact: 60% of foot traffic from nearby metro station\n\n📍 High-Traffic Zones:\n1. Main Street corridor (15,000+ daily pedestrians)\n2. Business district (12,000+ weekday traffic)\n3. Shopping center vicinity (8,000+ weekend traffic)\n\n🎯 Strategic Recommendations:\n• Breakfast/lunch concepts: Target business district\n• Dinner/entertainment: Focus on Main Street\n• Weekend-focused: Consider shopping center proximity\n\nWhat operating hours and service style are you planning? I can recommend optimal locations based on your concept."
    }

    // Fast casual analysis
    if (input.includes('fast casual') || input.includes('quick service') || input.includes('fast')) {
      return "Fast-casual is a high-growth segment with excellent potential here! Market analysis shows:\n\n⚡ Fast-Casual Market Data:\n• Segment growth: +15% annually in this area\n• Average ticket: $12-18 per person\n• Peak demand: Lunch (60% of sales) and dinner (35%)\n• Customer preference: Healthy, customizable options\n\n🏆 Success Factors:\n1. Speed of service (<5 minutes)\n2. Fresh, quality ingredients\n3. Digital ordering capabilities\n4. High-visibility locations\n\n📊 Local Competition:\n• Limited healthy fast-casual options\n• Opportunity for Mediterranean, Poke, or Build-your-own concepts\n• Strong demand for plant-based options\n\nWhat cuisine type are you considering? I can analyze specific location opportunities and provide traffic projections."
    }

    // Default comprehensive response
    return "Thank you for that information! I'm analyzing multiple data points to provide you with comprehensive market insights:\n\n🔍 Current Analysis Status:\n• Demographic profiling: In progress\n• Competitive landscape mapping: Active\n• Foot traffic patterns: Monitoring\n• Real estate market: Evaluating\n\nTo provide you with the most accurate market research report, I need a few more details:\n\n1. What's your target cuisine/concept?\n2. What's your estimated investment budget?\n3. Who is your target customer demographic?\n4. What service style are you planning (dine-in, takeout, delivery)?\n\nOnce I have this information, I can generate a detailed feasibility report with location recommendations, competitive analysis, and revenue projections. You can also use the map tools on the left to explore specific areas - I'll provide real-time analysis of any location you click!"
  }

  const handleQuickSuggestion = (suggestion: string) => {
    handleSendMessage(suggestion)
  }

  const toggleHeatmap = (type: keyof typeof heatmapToggles) => {
    setHeatmapToggles(prev => ({
      ...prev,
      [type]: !prev[type]
    }))
  }

  const toggleFilter = (filter: string) => {
    if (filter === 'All') {
      setActiveFilters(['All'])
    } else {
      setActiveFilters(prev => {
        const newFilters = prev.includes(filter)
          ? prev.filter(f => f !== filter)
          : [...prev.filter(f => f !== 'All'), filter]
        return newFilters.length === 0 ? ['All'] : newFilters
      })
    }
  }

  const handleLocationClick = (lat: number, lng: number, address: string) => {
    setIsAnalyzing(true)
    const newLocation: LocationData = {
      lat,
      lng,
      address
    }
    setSelectedLocation(newLocation)

    // Simulate AI analysis
    setTimeout(() => {
      const insights = [
        "High foot traffic area with 15,000+ daily pedestrians",
        "Strong demographic match for your target audience",
        "Competitive rent prices compared to similar areas",
        "Excellent public transportation accessibility",
        "Growing food scene with complementary businesses nearby"
      ]

      const score = Math.floor(Math.random() * 3) + 8 // Random score between 8-10

      setSelectedLocation({
        ...newLocation,
        score,
        insights
      })
      setIsAnalyzing(false)
    }, 2000)
  }

  const handleCompleteSetup = () => {
    // Save restaurant profile to Firebase
    if (user && selectedLocation) {
      const setupData = {
        ...restaurantProfile,
        ...extractedData,
        location: selectedLocation,
        completedAt: new Date()
      }

      // In a real app, save to Firestore
      console.log('Saving restaurant setup:', setupData)

      // Redirect to dashboard
      router.push('/dashboard')
    }
  }

  // Prevent hydration mismatch by not rendering until mounted
  if (!mounted) {
    return (
      <div className="flex h-screen bg-gray-50 items-center justify-center">
        <div className="text-center">
          <div className="w-10 h-10 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin mb-4 mx-auto"></div>
          <p className="text-gray-600">Loading restaurant setup...</p>
        </div>
      </div>
    )
  }

  const handleLogout = async () => {
    try {
      await logout()
      router.push('/')
    } catch (error) {
      console.error('Logout error:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* BiteBase Header */}
      <header className="bg-white shadow-sm border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <div className="flex items-center">
              <div className="flex-shrink-0 flex items-center">
                <BiteBaseLogo size={32} className="hover:scale-105 transition-transform" />
              </div>
              <nav className="hidden md:ml-10 md:flex space-x-8">
                <a href="/dashboard" className="text-gray-500 hover:text-green-600 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300 text-sm font-medium transition-colors">
                  Dashboard
                </a>
                <a href="/restaurant-setup" className="text-green-600 border-green-500 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                  Market Research
                </a>
                <a href="/market-analysis" className="text-gray-500 hover:text-green-600 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300 text-sm font-medium transition-colors">
                  Location Analysis
                </a>
                <a href="/reports" className="text-gray-500 hover:text-green-600 inline-flex items-center px-1 pt-1 border-b-2 border-transparent hover:border-gray-300 text-sm font-medium transition-colors">
                  Reports
                </a>
              </nav>
            </div>
            <div className="flex items-center space-x-4">
              {/* Search */}
              <div className="hidden md:block">
                <div className="relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Search className="w-4 h-4 text-gray-400" />
                  </div>
                  <input
                    type="text"
                    className="focus:ring-green-500 focus:border-green-500 block w-full pl-10 pr-3 py-2 sm:text-sm border-gray-300 rounded-md"
                    placeholder="Search locations..."
                  />
                </div>
              </div>

              {/* Notifications */}
              <button type="button" className="p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 relative">
                <span className="sr-only">View notifications</span>
                <Bell className="w-5 h-5" />
                <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500"></span>
              </button>

              {/* User Profile */}
              <div className="relative">
                <div className="flex items-center space-x-3">
                  <div className="hidden md:block text-right">
                    <p className="text-sm font-medium text-gray-700">{user?.displayName || 'Restaurant Owner'}</p>
                    <p className="text-xs text-gray-500">Market Research</p>
                  </div>
                  <button
                    type="button"
                    className="max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    onClick={handleLogout}
                  >
                    <span className="sr-only">Open user menu</span>
                    <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                      <User className="w-4 h-4 text-green-600" />
                    </div>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Breadcrumb Navigation */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-12">
            <nav className="flex" aria-label="Breadcrumb">
              <ol className="flex items-center space-x-4">
                <li>
                  <div>
                    <a href="/dashboard" className="text-gray-400 hover:text-gray-500">
                      <Home className="flex-shrink-0 h-4 w-4" />
                      <span className="sr-only">Dashboard</span>
                    </a>
                  </div>
                </li>
                <li>
                  <div className="flex items-center">
                    <ChevronRight className="flex-shrink-0 h-4 w-4 text-gray-400" />
                    <a href="/restaurant-setup" className="ml-4 text-sm font-medium text-green-600">
                      Market Research Platform
                    </a>
                  </div>
                </li>
              </ol>
            </nav>
            <div className="flex items-center space-x-3">
              <div className="text-sm text-gray-500">
                <span className="font-medium">Status:</span> Analyzing Market Data
              </div>
              <div className="flex items-center">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse mr-2"></div>
                <span className="text-sm text-green-600 font-medium">AI Assistant Active</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex h-[calc(100vh-112px)] overflow-hidden">
        {/* Map Section */}
        <div className="flex-1 relative">
          {/* Interactive Mapbox Map */}
          <MapboxMap
            center={mapCenter}
            zoom={mapZoom}
            className="w-full h-full"
            onClick={(e: any) => {
              // Simulate click coordinates for demo
              const lat = 13.7563 + (Math.random() - 0.5) * 0.01
              const lng = 100.5018 + (Math.random() - 0.5) * 0.01
              handleLocationClick(lat, lng, `${lat.toFixed(4)}, ${lng.toFixed(4)}`)
            }}
          >
            {/* Restaurant markers and heatmap overlays will be added here */}
          </MapboxMap>

          {/* Heatmap overlays */}
          {heatmapToggles.demographics && (
            <div className="absolute inset-0 bg-gradient-to-r from-purple-400 via-pink-400 to-red-400 opacity-20 pointer-events-none"></div>
          )}
          {heatmapToggles.population && (
            <div className="absolute inset-0 bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 opacity-25 pointer-events-none"></div>
          )}
          {heatmapToggles.realEstate && (
            <div className="absolute inset-0 bg-gradient-to-r from-orange-400 via-yellow-400 to-red-400 opacity-20 pointer-events-none"></div>
          )}
          {heatmapToggles.footTraffic && (
            <div className="absolute inset-0 bg-gradient-to-r from-green-400 via-emerald-400 to-teal-400 opacity-25 pointer-events-none"></div>
          )}

          {/* Professional Market Research Panel */}
          <div className={`absolute right-4 top-4 w-96 bg-white rounded-xl shadow-xl border border-gray-100 z-10 overflow-hidden transition-all duration-300 ${
            panelExpanded ? 'h-[600px]' : 'h-14'
          }`}>
            <div
              className="bg-gradient-to-r from-green-600 to-green-700 p-4 flex justify-between items-center cursor-pointer"
              onClick={() => setPanelExpanded(!panelExpanded)}
            >
              <div className="flex items-center space-x-2">
                <BarChart3 className="w-5 h-5 text-white" />
                <h3 className="font-semibold text-white">Market Intelligence</h3>
              </div>
              {panelExpanded ? <ChevronUp className="w-5 h-5 text-white" /> : <ChevronDown className="w-5 h-5 text-white" />}
            </div>

            {panelExpanded && (
              <div className="p-4 overflow-y-auto" style={{ height: 'calc(100% - 60px)' }}>
                {/* Heatmap Controls */}
                <div className="mb-6">
                  <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <Activity className="w-4 h-4 mr-2 text-emerald-600" />
                    Demographic Heatmaps
                  </h4>

                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Users className="w-4 h-4 text-purple-500" />
                        <span className="text-sm font-medium">Demographics</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={heatmapToggles.demographics}
                          onChange={() => toggleHeatmap('demographics')}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                      </label>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Target className="w-4 h-4 text-blue-500" />
                        <span className="text-sm font-medium">Population Density</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={heatmapToggles.population}
                          onChange={() => toggleHeatmap('population')}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                      </label>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Building className="w-4 h-4 text-orange-500" />
                        <span className="text-sm font-medium">Real Estate</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={heatmapToggles.realEstate}
                          onChange={() => toggleHeatmap('realEstate')}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                      </label>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Activity className="w-4 h-4 text-green-500" />
                        <span className="text-sm font-medium">Foot Traffic</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={heatmapToggles.footTraffic}
                          onChange={() => toggleHeatmap('footTraffic')}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                      </label>
                    </div>
                  </div>
                </div>

                {/* Location Filters */}
                <div className="mb-6">
                  <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <MapIcon className="w-4 h-4 mr-2 text-emerald-600" />
                    Location Filters
                  </h4>

                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <ShoppingCart className="w-4 h-4 text-blue-500" />
                        <span className="text-sm font-medium">Grocery Stores</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={mapFilters.groceryStores}
                          onChange={() => setMapFilters(prev => ({ ...prev, groceryStores: !prev.groceryStores }))}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-emerald-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-600"></div>
                      </label>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Zap className="w-4 h-4 text-yellow-500" />
                        <span className="text-sm font-medium">Strategic Points</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={mapFilters.strategicPoints}
                          onChange={() => setMapFilters(prev => ({ ...prev, strategicPoints: !prev.strategicPoints }))}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-emerald-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-600"></div>
                      </label>
                    </div>

                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-2">
                        <Utensils className="w-4 h-4 text-red-500" />
                        <span className="text-sm font-medium">Competitors</span>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          checked={mapFilters.competitors}
                          onChange={() => setMapFilters(prev => ({ ...prev, competitors: !prev.competitors }))}
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-emerald-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-600"></div>
                      </label>
                    </div>
                  </div>
                </div>
                {/* Competitor Analysis */}
                <div className="mb-6">
                  <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <Utensils className="w-4 h-4 mr-2 text-emerald-600" />
                    Competitor Analysis
                  </h4>

                  <div className="space-y-3">
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Price Range</label>
                      <select
                        value={competitorFilters.priceRange}
                        onChange={(e) => setCompetitorFilters(prev => ({ ...prev, priceRange: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                      >
                        <option value="all">All Price Ranges</option>
                        <option value="budget">Budget ($)</option>
                        <option value="mid">Mid-range ($$)</option>
                        <option value="premium">Premium ($$$)</option>
                      </select>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Minimum Rating</label>
                      <select
                        value={competitorFilters.rating}
                        onChange={(e) => setCompetitorFilters(prev => ({ ...prev, rating: e.target.value }))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 text-sm"
                      >
                        <option value="all">All Ratings</option>
                        <option value="4+">4+ Stars</option>
                        <option value="3+">3+ Stars</option>
                      </select>
                    </div>

                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Search Radius: {competitorFilters.distance}km</label>
                      <input
                        type="range"
                        min="0.5"
                        max="5"
                        step="0.5"
                        value={competitorFilters.distance}
                        onChange={(e) => setCompetitorFilters(prev => ({ ...prev, distance: parseFloat(e.target.value) }))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                      />
                    </div>
                  </div>
                </div>

                {/* Measurement Tools */}
                <div className="mb-6">
                  <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                    <Ruler className="w-4 h-4 mr-2 text-emerald-600" />
                    Measurement Tools
                  </h4>

                  <div className="space-y-3">
                    <button
                      onClick={() => setMeasurementMode(!measurementMode)}
                      className={`w-full px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                        measurementMode
                          ? 'bg-emerald-100 text-emerald-800 border border-emerald-300'
                          : 'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200'
                      }`}
                    >
                      {measurementMode ? 'Exit Measurement Mode' : 'Enable Distance Measurement'}
                    </button>

                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-2 block">Buffer Radius: {bufferRadius}m</label>
                      <input
                        type="range"
                        min="100"
                        max="2000"
                        step="100"
                        value={bufferRadius}
                        onChange={(e) => setBufferRadius(parseInt(e.target.value))}
                        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                      />
                      <div className="flex justify-between text-xs text-gray-500 mt-1">
                        <span>100m</span>
                        <span>2km</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Professional Map Controls */}
          <div className="absolute top-4 left-4 space-y-2 z-10">
            <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-2">
              <div className="space-y-2">
                <button
                  className="w-10 h-10 bg-white rounded-lg flex items-center justify-center hover:bg-emerald-50 transition-colors group"
                  title="My Location"
                >
                  <Navigation className="w-5 h-5 text-emerald-600 group-hover:text-emerald-700" />
                </button>
                <button
                  className="w-10 h-10 bg-white rounded-lg flex items-center justify-center hover:bg-emerald-50 transition-colors group"
                  title="Map Layers"
                >
                  <Layers className="w-5 h-5 text-gray-600 group-hover:text-emerald-600" />
                </button>
                <button
                  className={`w-10 h-10 rounded-lg flex items-center justify-center transition-colors group ${
                    measurementMode
                      ? 'bg-emerald-100 text-emerald-700'
                      : 'bg-white text-gray-600 hover:bg-emerald-50 hover:text-emerald-600'
                  }`}
                  onClick={() => setMeasurementMode(!measurementMode)}
                  title="Measurement Tool"
                >
                  <Ruler className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Professional Search Bar */}
          <div className="absolute top-4 left-1/2 transform -translate-x-1/2 w-11/12 max-w-lg z-10">
            <div className="relative">
              <input
                type="text"
                placeholder="Search locations, addresses, or landmarks..."
                className="w-full pl-12 pr-16 py-3 bg-white rounded-xl shadow-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent text-sm"
              />
              <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                <Search className="w-5 h-5" />
              </div>
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex space-x-1">
                <button className="w-8 h-8 bg-emerald-500 text-white rounded-lg flex items-center justify-center hover:bg-emerald-600 transition-colors">
                  <Filter className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>

          {/* Map Legend */}
          {(heatmapToggles.demographics || heatmapToggles.population || heatmapToggles.realEstate || heatmapToggles.footTraffic) && (
            <div className="absolute bottom-4 left-4 bg-white rounded-lg shadow-lg border border-gray-200 p-3 z-10">
              <h4 className="text-sm font-semibold text-gray-800 mb-2">Map Legend</h4>
              <div className="space-y-1 text-xs">
                {heatmapToggles.demographics && (
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-gradient-to-r from-purple-400 to-red-400 rounded mr-2"></div>
                    <span>Demographics</span>
                  </div>
                )}
                {heatmapToggles.population && (
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-gradient-to-r from-blue-400 to-teal-400 rounded mr-2"></div>
                    <span>Population Density</span>
                  </div>
                )}
                {heatmapToggles.realEstate && (
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-gradient-to-r from-orange-400 to-red-400 rounded mr-2"></div>
                    <span>Real Estate Value</span>
                  </div>
                )}
                {heatmapToggles.footTraffic && (
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-gradient-to-r from-green-400 to-teal-400 rounded mr-2"></div>
                    <span>Foot Traffic</span>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Restaurant List Panel */}
        <div className="h-96 md:h-64 bg-white shadow-lg rounded-t-3xl overflow-hidden transition-all duration-300 ease-in-out">
          <div className="h-full flex flex-col">
            {/* Panel Header */}
            <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
              <h3 className="font-semibold text-lg">Nearby Restaurants</h3>
              <div className="flex space-x-2">
                <button className="px-3 py-1 text-sm rounded-full border border-gray-300 hover:bg-gray-100">Filter</button>
                <button className="px-3 py-1 text-sm rounded-full border border-gray-300 hover:bg-gray-100">Sort</button>
              </div>
            </div>

            {/* Filter Chips */}
            <div className="px-6 py-2 border-b border-gray-200 overflow-x-auto whitespace-nowrap">
              <div className="inline-flex space-x-2">
                {filterOptions.map((filter) => (
                  <button
                    key={filter}
                    onClick={() => toggleFilter(filter)}
                    className={`px-3 py-1 text-sm rounded-full border transition-colors ${
                      activeFilters.includes(filter)
                        ? 'bg-emerald-50 text-emerald-800 border-emerald-500'
                        : 'border-gray-300 hover:bg-gray-100'
                    }`}
                  >
                    {filter}
                  </button>
                ))}
              </div>
            </div>

            {/* Restaurant List */}
            <div className="flex-1 overflow-y-auto">
              {restaurants.map((restaurant) => (
                <div key={restaurant.id} className="border-b border-gray-200 p-4 hover:bg-gray-50 transition-all duration-300 cursor-pointer hover:-translate-y-1 hover:shadow-md">
                  <div className="flex">
                    <div className="w-20 h-20 rounded-lg overflow-hidden mr-4 flex-shrink-0">
                      <img src={restaurant.image} alt={restaurant.name} className="w-full h-full object-cover" />
                    </div>
                    <div className="flex-1">
                      <div className="flex justify-between items-start">
                        <h4 className="font-semibold">{restaurant.name}</h4>
                        <div className="flex items-center text-yellow-500 text-sm">
                          <Star className="w-4 h-4 fill-current" />
                          <span className="ml-1">{restaurant.rating}</span>
                        </div>
                      </div>
                      <div className="flex items-center text-sm text-gray-500 mt-1">
                        <Utensils className="w-4 h-4 mr-1" />
                        <span>{restaurant.cuisine}</span>
                        <span className="mx-2">•</span>
                        <MapPin className="w-4 h-4 mr-1" />
                        <span>{restaurant.distance}</span>
                      </div>
                      <div className="flex items-center text-sm text-gray-500 mt-1">
                        <Clock className="w-4 h-4 mr-1" />
                        <span>{restaurant.hours}</span>
                      </div>
                      <div className="mt-2 flex flex-wrap gap-1">
                        <span className="px-2 py-1 bg-emerald-50 text-emerald-800 text-xs rounded-full">{restaurant.priceRange}</span>
                        {restaurant.tags.map((tag) => (
                          <span key={tag} className="px-2 py-1 bg-emerald-50 text-emerald-800 text-xs rounded-full">{tag}</span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </main>

      {/* Professional AI Market Research Chat - Integrated Design */}
      <div className="fixed bottom-4 right-4 w-[420px] h-[500px] bg-white shadow-2xl rounded-xl border border-gray-200 z-20">
        <div className="h-full flex flex-col">
          {/* Enhanced Chat Header - Matching BiteBase Design */}
          <div className="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-green-600 to-green-700 rounded-t-xl">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center mr-3 shadow-sm">
                  <Bot className="w-6 h-6 text-green-600" />
                </div>
                <div>
                  <h3 className="font-bold text-white">BiteBase AI Assistant</h3>
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-green-300 rounded-full mr-2 animate-pulse"></div>
                    <p className="text-green-100 text-sm">Market Research Specialist • Online</p>
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                <button className="w-8 h-8 bg-white bg-opacity-20 rounded-lg flex items-center justify-center hover:bg-opacity-30 transition-colors">
                  <Settings className="w-4 h-4 text-white" />
                </button>
              </div>
            </div>
          </div>

          {/* Enhanced Chat Messages */}
          <div ref={chatContainerRef} className="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-gray-50 to-white">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex items-start space-x-3 max-w-sm ${message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm ${
                    message.sender === 'bot' ? 'bg-gradient-to-br from-emerald-100 to-emerald-200' : 'bg-gradient-to-br from-blue-100 to-blue-200'
                  }`}>
                    {message.sender === 'bot' ? (
                      <Bot className="w-4 h-4 text-emerald-700" />
                    ) : (
                      <User className="w-4 h-4 text-blue-700" />
                    )}
                  </div>
                  <div className={`px-4 py-3 rounded-2xl shadow-sm max-w-full ${
                    message.sender === 'bot'
                      ? 'bg-white border border-gray-200 text-gray-800'
                      : 'bg-gradient-to-r from-emerald-600 to-emerald-700 text-white'
                  }`}>
                    <p className="text-sm leading-relaxed whitespace-pre-line">{message.content}</p>
                    <p className={`text-xs mt-2 ${
                      message.sender === 'bot' ? 'text-gray-400' : 'text-emerald-100'
                    }`}>
                      {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </p>
                  </div>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-emerald-100 to-emerald-200 rounded-full flex items-center justify-center flex-shrink-0 shadow-sm">
                    <Bot className="w-4 h-4 text-emerald-700" />
                  </div>
                  <div className="px-4 py-3 rounded-2xl bg-white border border-gray-200 shadow-sm">
                    <div className="flex items-center space-x-2">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-emerald-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-emerald-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-emerald-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                      <span className="text-xs text-gray-500">Analyzing market data...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Enhanced Chat Input */}
          <div className="p-4 border-t border-gray-200 bg-white">
            <div className="flex space-x-3 mb-3">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage(inputValue)}
                  placeholder="Ask about demographics, competition, foot traffic..."
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-sm bg-gray-50 focus:bg-white transition-colors"
                />
              </div>
              <button
                onClick={() => handleSendMessage(inputValue)}
                disabled={!inputValue.trim() || isLoading}
                className="px-4 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed shadow-sm hover:shadow-md"
              >
                <Send className="w-4 h-4" />
              </button>
            </div>

            {/* Enhanced Quick Suggestions */}
            <div className="space-y-2">
              <p className="text-xs text-gray-500 font-medium">Quick Analysis:</p>
              <div className="flex flex-wrap gap-2">
                {quickSuggestions.map((suggestion) => (
                  <button
                    key={suggestion}
                    onClick={() => handleQuickSuggestion(suggestion)}
                    className="px-3 py-1.5 text-xs bg-gray-100 text-gray-700 rounded-lg hover:bg-green-100 hover:text-green-700 transition-colors border border-gray-200 hover:border-green-300"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Export the client-only version to prevent SSR issues
export default function RestaurantSetupPage() {
  return <ClientOnlyRestaurantSetup />
}